{"version":3,"sources":["chart.js","effects.js"],"names":["$","window","load","frontEndData","backEndData","barChartOrientation","frontendLabels","backendLabels","ctxFrontend","ctxBackend","chartOptions","tooltips","enabled","hover","mode","legend","display","scales","yAxes","ticks","beginAtZero","fontSize","xAxes","matchMedia","matches","backendInView","frontendInView","isScrolledIntoView","elem","docViewTop","scrollTop","docViewBottom","height","elemTop","offset","top","elemBottom","scroll","Chart","type","data","labels","datasets","backgroundColor","returnColorData","length","borderColor","borderWidth","options","String","Num","i","push","document","ready","fadeOut","windowWidth","width","$root","click","animate","this","attr","on","navButton","navBarAll","navBar","closeButton","hamBurgerIcons","hasClass","show","hide","css","homeLI","active","userScrolled","setInterval","addClass","removeClass","portSection","portHeader","portParallax","expandBtn","sendBTN","socialIcon","headerLinks","emailLink","BTNstate","color","modalType","modal","clearForm","contactForm","reset","formWarning","nameInput","val","trim","emailInput","messageInput","formVal","formAlert","alert","event","preventDefault","newMessage","name","email","message","post","done","copyright","currentYear","Date","getFullYear","html"],"mappings":"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","file":"../../main.js","sourcesContent":["$(window).load( () => {\n\n    // chart JS START --------------\n    const htmlData = 70;\n    const cssData = 70;\n    const bootsrapData = 45;\n    const jsData = 50;\n    const reactData = 50;\n    const jqueryData = 50;\n    const respDes = 55;\n    const ajaxData = 50;\n    const firebaseData = 30;\n    const mySQLdata = 35;\n    const nodeData = 40;\n    const expressData = 40;\n    const handlebarsData = 35;\n    const MongoDBData = 30;\n    const photoshopData = 70;\n\n    const frontEndData = [htmlData, cssData, bootsrapData, jsData, jqueryData, reactData, respDes, photoshopData];\n    const backEndData = [ajaxData, nodeData, expressData, handlebarsData, firebaseData, mySQLdata, MongoDBData];\n\n    let barChartOrientation = 'bar';\n    const frontendLabels = [\"HTML5\", \"CSS3\", \"Bootstrap\", \"Javascript\", \"jQuery\", \"React.JS\", \"Responsive Design\", \"Abode Photoshop\"];\n    const backendLabels = [\"AJAX\", \"Node.js\", \"Express.js\", \"Handlebars.js\", \"Google Firebase\", \"mySQL\", \"MongoDB\"];\n    const ctxFrontend = $(\"#frontendCanvas\");\n    const ctxBackend = $(\"#backendCanvas\");\n    const chartOptions = {\n        tooltips: {\n            enabled: false\n        },\n        hover: {\n            mode: null\n        },\n        legend: {\n            display: false\n        },\n        scales: {\n            yAxes: [{\n                display: false,\n                ticks: {\n                    beginAtZero: true,\n                    fontSize: 12\n                },\n            }],\n            xAxes: [{\n                display: true,\n                ticks: {\n                    beginAtZero: true,\n                    fontSize: 16\n                },\n            }],\n        }\n    };\n\n    if (window.matchMedia('(max-width: 599px)').matches) { //mobile chart\n        barChartOrientation = 'horizontalBar';\n        chartOptions.scales.yAxes[0].display = true;\n        chartOptions.scales.xAxes[0].display = false;\n    };\n\n\n    const myFrontendChart = () => { //created inside function to be able to called at scroll later\n        new Chart(ctxFrontend, {\n            type: barChartOrientation,\n            data: {\n                labels: frontendLabels,\n                datasets: [{\n                    data: frontEndData,\n                    backgroundColor: returnColorData('rgba(207, 99, 121, 0.4)', frontEndData.length),\n                    borderColor: returnColorData('rgba(227,76,38,1)', frontEndData.length),\n                    borderWidth: 2\n                }]\n            },\n            options: chartOptions\n        });\n    };\n\n    const myBackendChart = () => { //created inside function to be able to called at scroll later\n        new Chart(ctxBackend, {\n            type: barChartOrientation,\n            data: {\n                labels: backendLabels,\n                datasets: [{\n                    data: backEndData,\n                    backgroundColor: returnColorData('rgba(34, 34, 34, 0.8)', backEndData.length),\n                    borderColor: returnColorData('rgba(0,0,0,1)', backEndData.length),\n                    borderWidth: 2\n                }]\n            },\n            options: chartOptions\n        });\n    };\n\n    //code for loading graph at scroll\n\n    let backendInView = false;\n    let frontendInView = false;\n\n    isScrolledIntoView = (elem) => //function for determining if HTML element is scrolled into view\n    {\n        const docViewTop = $(window).scrollTop();\n        const docViewBottom = docViewTop + $(window).height();\n\n        const elemTop = $(elem).offset().top;\n        const elemBottom = elemTop + $(elem).height();\n\n        return ((elemTop <= docViewBottom) && (elemBottom >= docViewTop));\n    }\n\n    $(window).scroll( () => { //load front-end chart when section is in viewport \n        if (isScrolledIntoView($('#frontendCanvas'))) {\n            if (frontendInView) {\n                return;\n            }\n            frontendInView = true;\n            myFrontendChart();\n        } else {\n            frontendInView = false;\n        }\n    });\n\n    $(window).scroll( () => { //load back-end chart when section is in viewport \n        if (isScrolledIntoView($('#backendCanvas'))) {\n            if (backendInView) {\n                return;\n            }\n            backendInView = true;\n            myBackendChart();\n        } else {\n            backendInView = false;\n        }\n    });\n\n    returnColorData = (String, Num) => {\n\n        const data = [];\n\n        for (let i = 0; i < Num; i++) {\n            data.push(String);\n        }\n\n        return data;\n    }\n\n    //--------------------------------END OF code for loading graph at scroll\n\n    //----------------------------------------------------------------END OF .load SCRIPT\t\n});","$(document).ready( () => {\n\n    $(\"#loaderWrap\").fadeOut(\"slow\");\n\n    let windowWidth = $(window).width();\n    let windowHeight = $(window).height();\n\n    // smoothScroll START --------------\n\n    const $root = $('html, body');\n\n    $('.navLink').click(function() {\n        $root.animate({\n            scrollTop: $($(this).attr('href')).offset().top\n        }, 500);\n        return false;\n    });\n\n    //--------------------------------\n\n    //hide nav bar after selection is made (on smaller screens):\n\n    $('.nav a').on('click', () => {\n        if (windowWidth < 599 || windowWidth < 750) { //less than mobile breakpoint, landscape & portrait\n            $('.navbar-toggle').click();\n        }\n    });\n\n\n    //--------------------------------\n\n    // nav color change on navButton click on mobile:\n\n    const navButton = $('#mobileNavButton');\n    const navLink = $('.navlink');\n    const navBarAll = $('.navbar-toggle, .navbar-collapse, .navbar, .collapse');\n    const navBar = $('.nav');\n    const closeButton = $('.closeIcon');\n    const hamBurgerIcons= $('.icon-bar');\n\n    navButton.click(() => {\n\n        if (navButton.hasClass('collapsed')) {\n            closeButton.show();\n            hamBurgerIcons.hide();\n            navBarAll.css('background-color', '#222');\n            navBarAll.css('border-color', 'transparent');\n        } else {\n            closeButton.hide();\n            hamBurgerIcons.show();\n            navBarAll.css('background-color', 'transparent');\n            navBarAll.css('border-color', '#d8d8d8');\n\n        };\n\n    });\n\n    //--------------------------------\n\n    // hides <li>s in mobile nav table in mobile nav instead of default height change, for better toggle animation:\n\n    $('body').on('click', 'button', function() {\n\n        const currentAria = $(this).attr(\"aria-expanded\");\n\n        if (currentAria == 'true') {\n\n            navBar.css('display', 'none')\n        } else {\n\n            navBar.css('display', 'inline-block')\n\n        }\n\n    });\n\n    //--------------------------------\n\n    //on desktop, change navbar background color when home section is not active i.e. the view is not at the top of the page\n\n    const homeLI = $('#homeLink');\n    let active = '';\n    let userScrolled = false;\n\n    $(window).scroll(() => {\n\n        userScrolled = true;\n        active = $('.active');\n\n    });\n\n    setInterval(() => {\n\n        if (userScrolled) {\n\n            if (!homeLI.hasClass('active') && windowWidth > 767) { //ipad mini and up\n\n                $('.navbar-inverse').addClass('opaqueNav', 150);\n\n            } else if (homeLI.hasClass('active') && windowWidth > 767) { //ipad mini and up\n\n                $('.navbar-inverse').removeClass('opaqueNav', 150);\n            };\n\n\n            userScrolled = false;\n\n        }\n\n    }, 50);\n\n    //--------------------------------\n\n    //on mobile, remove parallax, insert mobile styling (portfolio section)\n\n    const portSection = $('#portfolio');\n    const portHeader = $('#portHeader');\n    const portParallax = $('.portParallax');\n\n    if (windowWidth < 1025) { //less than bootstrap's mobile breakpoint\n        portSection.removeClass('portParallax');\n        portSection.addClass('mobileHeaders');\n\n\n        portHeader.css('background', '#222222');\n        portHeader.css('padding-top', '70px');\n        portHeader.css('padding-bottom', '50px');\n\n        portParallax.css('background-attachment', 'initial');\n        portParallax.css('background-size', '200%');\n\n    }\n\n    //--------------------------------\n\n    //expandBtn button effects on portfolio and contact modal\n\n    const expandBtn = $('.expandBtn');\n    const sendBTN = $('#messageSend');\n    const socialIcon = $('.socialIcons');\n    const headerLinks = $('.headerLinks')\n    const emailLink = $('#emailLink')\n    let BTNstate = true;\n\n    // Animate on hover\n\n    //'learn more' header link that scrolls to bio section\n    $(headerLinks).hover(function() {\n        if (BTNstate) {\n            $(this).animate({\n                color: \"#9f6379\"\n\n            }, 200);\n        } else {\n            $(this).animate({\n                color: \"white\"\n            }, 300);\n        }\n        BTNstate = !BTNstate;\n    });\n\n    //message start button\n    $(expandBtn).hover(function() {\n\n        if (BTNstate) {\n            $(this).animate({\n                backgroundColor: \"white\",\n                color: \"#9f6379\",\n                width: 300\n\n            }, 200);\n        } else {\n            $(this).animate({\n                backgroundColor: \"transparent\",\n                color: \"white\",\n                width: 260\n            }, 300);\n        }\n        BTNstate = !BTNstate;\n    });\n    //send button\n    $(sendBTN).hover(function() {\n        if (BTNstate) {\n            $(this).animate({\n                backgroundColor: \"white\",\n                color: \"#9f6379\",\n                width: 240\n\n            }, 200);\n        } else {\n            $(this).animate({\n                backgroundColor: \"transparent\",\n                color: \"white\",\n                width: 200\n            }, 300);\n        }\n        BTNstate = !BTNstate;\n    });\n\n    // Animate on click\n\n    //message start button\n    $(expandBtn).click(function() {\n\n        $(this).animate({\n            color: \"white\"\n        }, 300);\n\n    });\n    //send button\n    $(sendBTN).click(() => {\n\n        $(this).animate({\n            color: \"white\"\n        }, 300);\n\n    });\n\n    //social links and email address \n\n    $(socialIcon).hover(function() {\n        if (BTNstate) {\n            $(this).animate({\n                color: \"#222222\",\n\n            }, 200);\n        } else {\n            $(this).animate({\n                color: \"white\",\n            }, 300);\n        }\n        BTNstate = !BTNstate;\n    });\n\n    $(emailLink).hover(function() {\n        if (BTNstate) {\n            $(this).animate({\n                color: \"#222222\",\n\n            }, 200);\n        } else {\n            $(this).animate({\n                color: \"white\",\n            }, 300);\n        }\n        BTNstate = !BTNstate;\n    });\n\n\n    //--------------------------------\n\n    //show portfolio modals without the click of a <button> html element\n\n    $('.portfolioIcons').click(function() {\n\n        const modalType = $(this).attr('data-target');\n\n        $(modalType).modal(\"show\");\n\n    })\n\n    //--------------------------------\n\n    //Collect contact form and create POST request to send email\n\n    //function for clearing out contact form\n\n    clearForm = () => {\n\n        const contactForm = $('#contactForm');\n\n        for (let i = 0; i < contactForm.length; i++) {\n            contactForm[i].reset();\n            $(\"#name\").css('background-color', 'white');\n            $(\"#email\").css('background-color', 'white');\n            $(\"#message\").css('background-color', 'white');\n        };\n    };\n\n    //function for displaying warning colors in form inputs that are empty\n\n    formWarning = () => {\n\n        let nameInput = $(\"#name\").val().trim();\n        let emailInput = $(\"#email\").val().trim();\n        let messageInput = $(\"#message\").val().trim();\n\n        if (nameInput == '') {\n            $(\"#name\").css('background-color', '#ffe4b2');\n        }\n\n        if (emailInput == '') {\n            $(\"#email\").css('background-color', '#ffe4b2');\n        }\n\n        if (messageInput == '') {\n            $(\"#message\").css('background-color', '#ffe4b2');\n        }\n    };\n\n    // contact form validator function\n\n    formVal = () => {\n\n        let nameInput = $(\"#name\").val().trim();\n        let emailInput = $(\"#email\").val().trim();\n        let messageInput = $(\"#message\").val().trim();\n\n        if (nameInput == '' || emailInput == '' || messageInput == '') {\n            formWarning();\n            return false;\n\n        } else {\n\n            return true;\n        };\n    };\n\n    //function for alerting when contact form is not properly filled out\n\n    formAlert = () => {\n        alert(\n\n            `Message not sent. Please make sure the form is filled out correctly.\\n\\n\n            \\t• Make sure each field is filled.\\n\n            \\t• Make sure the provided email is in the correct format:\\n\n            \\t- e.g. example@example.com`\n        );\n    };\n\n    $(\"#sendButton\").on(\"click\", () => {\n\n        event.preventDefault();\n\n        if (formVal()) {\n\n            let contactForm = $('#contactForm');\n            let nameInput = $(\"#name\").val().trim();\n            let emailInput = $(\"#email\").val().trim();\n            let messageInput = $(\"#message\").val().trim();\n\n            let newMessage = {\n                name: nameInput,\n                email: emailInput,\n                message: messageInput\n            };\n\n\n            $.post(\"/contact\", newMessage)\n                .done((data) => {\n                    if (data === true) {\n                        alert(\"Thanks for contacting\");\n                        $('.close').click(); //close contact modal\n                    } else {\n                        formAlert();\n                    };\n\n                });\n\n        } else {\n            formAlert();\n        };\n\n    });\n\n    //clear form on close\n\n    $(\".close\").on(\"click\", clearForm);\n\n    //--------------------------------\n\n    //insert current year into copyright text (in footer)\n\n    const copyright = $('#copyright'); \n    const currentYear = (new Date()).getFullYear();\n    copyright.html(`&copy; ${currentYear}`)\n\n    //----------------------------------------------------------------END OF SCRIPT \n});"]}